{"Name":"Android Swipe Layout","Id":2385,"Alias":"AndroidSwipeLayout","Description":"\n\u003ciframe src=\"https://appetize.io/embed/g4twr3npa69ffxta0rftkedr6g?device=nexus5\u0026scale=75\u0026autoplay=true\u0026orientation=portrait\u0026deviceColor=black\" \n        width=\"300px\" height=\"597px\" frameborder=\"0\" scrolling=\"no\"\n        style=\"float:right;margin-left:1em;\"\u003e\u003c/iframe\u003e\n\n**Android Swipe Layout** provides a layout which enables view to be swiped \naway to reveal other views underneath.\n\nThis library can be used anywhere, such as in a `ListView`, `GridView`, \n`RecyclerView` or just another `View`. There are several events that can\nbe subscribed to, such as `Closed`, `Opened` or `Update`.\n\nThe layouts can be nested within each other, even allowing draggable \ncontrols to till function.\n\n## Usage\n\nFirst, create a `SwipeLayout`, with the last child being the `SurfaceView`,\nor the main view that is swiped out of the way. The other children are\nthe `BottomViews`.\n\n    \u003ccom.daimajia.swipe.SwipeLayout \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\" \n        android:layout_height=\"80dp\"\u003e\n        \n        \u003c!-- Bottom View Start--\u003e\n        \u003cLinearLayout\n            android:background=\"#66ddff00\"\n            android:id=\"@+id/bottom_wrapper\"\n            android:layout_width=\"160dp\"\n            android:weightSum=\"1\"\n            android:layout_height=\"match_parent\"\u003e\n            \u003c!--What you want to show--\u003e\n        \u003c/LinearLayout\u003e\n        \u003c!-- Bottom View End--\u003e\n        \n        \u003c!-- Surface View Start --\u003e\n        \u003cLinearLayout\n            android:padding=\"10dp\"\n            android:background=\"#ffffff\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\u003e\n            \u003c!--What you want to show in SurfaceView--\u003e\n        \u003c/LinearLayout\u003e\n        \u003c!-- Surface View End --\u003e\n        \n    \u003c/com.daimajia.swipe.SwipeLayout\u003e\n\nThen, in the code, you can set up the layouts for the swipe.\n\n    // get SwipeLayout instance\n    swipeLayout = FindViewById\u003cSwipeLayout\u003e(Resource.Id.sample1);\n\n    // set show mode\n    swipeLayout.SetShowMode(SwipeLayout.ShowMode.LayDown);\n    \n    // add drag edge\n    // NOTE: if the BottomView has \u0027layout_gravity\u0027 attribute, \n    //       this line is unnecessary\n    var bottomView = FindViewById(Resource.Id.bottom_wrapper);\n    swipeLayout.AddDrag(SwipeLayout.DragEdge.Left, bottomView);\n    \n    swipeLayout.Opening += (sender, e) =\u003e {\n        // the SurfaceView has started moving to open\n    };\n    swipeLayout.Opened += (sender, e) =\u003e {\n        // the BottomView is completely visible\n    };\n    swipeLayout.Update += (sender, e) =\u003e {\n        // you are swiping\n        var left = e.LeftOffset;\n        var top = e.TopOffset;\n    };\n    swipeLayout.Closing += (sender, e) =\u003e {\n        // the SurfaceView has started moving to close\n    };\n    swipeLayout.Closed += (sender, e) =\u003e {\n        // when the SurfaceView totally covers the BottomView\n    };\n    swipeLayout.HandRelease += (sender, e) =\u003e {\n        // when user\u0027s hand releases the SurfaceView\n    };\n\n## Using SwipeAdapter\n\n`SwipeAdapter` is a set of helper members to save time when using\nscrollable views. It can help save and restore `SwipeLayout` status \n(`Open` | `Middle` | `Close`) when using `ListView` or `GridView`.\n\n**Provided Adapters**\n- `BaseSwipeAdapter`\n- `ArraySwipeAdapter`\n- `CursorSwipeAdapter`\n- `SimpleCursorSwipeAdapter`\n\n### BaseSwipeAdapter \n\n#### Usage\n\n`BaseSwipeAdapter` is extended from `BaseAdapter`, so it functions \nthe same. However, it\u0027s a little bit different from `BaseAdapter`. \nYou don\u0027t need to override `GetView()` method, but there are 3 new \nmethods you do need to override.\nThe `SwipeAdapter` will automatically maintain the `convertView`.\n\n    public override int GetSwipeLayoutResourceId(int position)\n    {\n        // return the `SwipeLayout` resource id in your listview | gridview item layout.\n    }    \n\n    public override View GenerateView(int position, ViewGroup parent)\n    {\n        // render a new item layout.\n    }\n    \n    public override void FillValues(int position, View convertView)\n    {\n        // fill values to your item layout returned from \"GenerateView\".\n        // The position param here is passed from the BaseAdapter\u0027s \"GetView\"\n    }\n\n#### Example\n\n    public class GridViewAdapter : BaseSwipeAdapter \n    {\n        private Context context;\n        \n        public GridViewAdapter(Context context)\n        {\n            this.context = context;\n        }\n\n        public override int GetSwipeLayoutResourceId(int position)\n        {\n            return Resource.Id.swipe;\n        }\n    \n        public override View GenerateView (int position, ViewGroup parent)\n        {\n            var view = LayoutInflater.From (context).Inflate (Resource.Layout.grid_item, null);\n            view.FindViewById (Resource.Id.trash).Click += (sender, e) =\u003e {\n                var pos = (int)view.Tag;\n                Toast.MakeText (context, \"click delete \" + pos, ToastLength.Short).Show ();\n            };\n            return view;\n        }\n\n        public override void FillValues (int position, View convertView)\n        {\n            convertView.Tag = position;\n\n            var t = convertView.FindViewById\u003cTextView\u003e (Resource.Id.position);\n            t.Text = (position + 1) + \".\";\n        }\n\n\t\tpublic override int Count {\n\t\t\tget { return 50; }\n\t\t}\n\n\t\tpublic override Java.Lang.Object GetItem (int position)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic override long GetItemId (int position)\n\t\t{\n\t\t\treturn position;\n\t\t}\n    }\n\n### ArraySwipeAdapter, CursorSwipeAdapter, SimpleCursorAdapter Usage\n\nThese three adapters are just like:\n - [`ArrayAdapter\u003cT\u003e`](http://developer.android.com/reference/android/widget/ArrayAdapter.html)\n - [`CursorAdapter`](http://developer.android.com/reference/android/widget/CursorAdapter.html)\n - [`SimpleCursorAdapter`](http://developer.android.com/reference/android/widget/SimpleCursorAdapter.html)\n\nAll of these 3 classes require an implementation that overrides\n`GetSwipeLayoutResourceId`:\n\n    public int GetSwipeLayoutResourceId(int position)\n    {\n        // return the SwipeLayout resource id in the layout.\n    }\n","Version":"1.2.0.0","Summary":"Android Swipe Layout provides a layout which enables view to be swiped away to reveal other views underneath.","QuickStart":"\n**Android Swipe Layout** provides a layout which enables view to be swiped \naway to reveal other views underneath.\n\nThis library can be used anywhere, such as in a `ListView`, `GridView`, \n`RecyclerView` or just another `View`. There are several events that can\nbe subscribed to, such as `Closed`, `Opened` or `Update`.\n\nThe layouts can be nested within each other, even allowing draggable \ncontrols to till function.\n\n## Usage\n\nFirst, create a `SwipeLayout`, with the last child being the `SurfaceView`,\nor the main view that is swiped out of the way. The other children are\nthe `BottomViews`.\n\n    \u003ccom.daimajia.swipe.SwipeLayout \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\" \n        android:layout_height=\"80dp\"\u003e\n        \n        \u003c!-- Bottom View Start--\u003e\n        \u003cLinearLayout\n            android:background=\"#66ddff00\"\n            android:id=\"@+id/bottom_wrapper\"\n            android:layout_width=\"160dp\"\n            android:weightSum=\"1\"\n            android:layout_height=\"match_parent\"\u003e\n            \u003c!--What you want to show--\u003e\n        \u003c/LinearLayout\u003e\n        \u003c!-- Bottom View End--\u003e\n        \n        \u003c!-- Surface View Start --\u003e\n        \u003cLinearLayout\n            android:padding=\"10dp\"\n            android:background=\"#ffffff\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\u003e\n            \u003c!--What you want to show in SurfaceView--\u003e\n        \u003c/LinearLayout\u003e\n        \u003c!-- Surface View End --\u003e\n        \n    \u003c/com.daimajia.swipe.SwipeLayout\u003e\n\nThen, in the code, you can set up the layouts for the swipe.\n\n    // get SwipeLayout instance\n    swipeLayout = FindViewById\u003cSwipeLayout\u003e(Resource.Id.sample1);\n\n    // set show mode\n    swipeLayout.SetShowMode(SwipeLayout.ShowMode.LayDown);\n    \n    // add drag edge\n    // NOTE: if the BottomView has \u0027layout_gravity\u0027 attribute, \n    //       this line is unnecessary\n    var bottomView = FindViewById(Resource.Id.bottom_wrapper);\n    swipeLayout.AddDrag(SwipeLayout.DragEdge.Left, bottomView);\n    \n    swipeLayout.Opening += (sender, e) =\u003e {\n        // the SurfaceView has started moving to open\n    };\n    swipeLayout.Opened += (sender, e) =\u003e {\n        // the BottomView is completely visible\n    };\n    swipeLayout.Update += (sender, e) =\u003e {\n        // you are swiping\n        var left = e.LeftOffset;\n        var top = e.TopOffset;\n    };\n    swipeLayout.Closing += (sender, e) =\u003e {\n        // the SurfaceView has started moving to close\n    };\n    swipeLayout.Closed += (sender, e) =\u003e {\n        // when the SurfaceView totally covers the BottomView\n    };\n    swipeLayout.HandRelease += (sender, e) =\u003e {\n        // when user\u0027s hand releases the SurfaceView\n    };\n\n## Using SwipeAdapter\n\n`SwipeAdapter` is a set of helper members to save time when using\nscrollable views. It can help save and restore `SwipeLayout` status \n(`Open` | `Middle` | `Close`) when using `ListView` or `GridView`.\n\n**Provided Adapters**\n- `BaseSwipeAdapter`\n- `ArraySwipeAdapter`\n- `CursorSwipeAdapter`\n- `SimpleCursorSwipeAdapter`\n\n### BaseSwipeAdapter \n\n#### Usage\n\n`BaseSwipeAdapter` is extended from `BaseAdapter`, so it functions \nthe same. However, it\u0027s a little bit different from `BaseAdapter`. \nYou don\u0027t need to override `GetView()` method, but there are 3 new \nmethods you do need to override.\nThe `SwipeAdapter` will automatically maintain the `convertView`.\n\n    public override int GetSwipeLayoutResourceId(int position)\n    {\n        // return the `SwipeLayout` resource id in your listview | gridview item layout.\n    }    \n\n    public override View GenerateView(int position, ViewGroup parent)\n    {\n        // render a new item layout.\n    }\n    \n    public override void FillValues(int position, View convertView)\n    {\n        // fill values to your item layout returned from \"GenerateView\".\n        // The position param here is passed from the BaseAdapter\u0027s \"GetView\"\n    }\n\n#### Example\n\n    public class GridViewAdapter : BaseSwipeAdapter \n    {\n        private Context context;\n        \n        public GridViewAdapter(Context context)\n        {\n            this.context = context;\n        }\n\n        public override int GetSwipeLayoutResourceId(int position)\n        {\n            return Resource.Id.swipe;\n        }\n    \n        public override View GenerateView (int position, ViewGroup parent)\n        {\n            var view = LayoutInflater.From (context).Inflate (Resource.Layout.grid_item, null);\n            view.FindViewById (Resource.Id.trash).Click += (sender, e) =\u003e {\n                var pos = (int)view.Tag;\n                Toast.MakeText (context, \"click delete \" + pos, ToastLength.Short).Show ();\n            };\n            return view;\n        }\n\n        public override void FillValues (int position, View convertView)\n        {\n            convertView.Tag = position;\n\n            var t = convertView.FindViewById\u003cTextView\u003e (Resource.Id.position);\n            t.Text = (position + 1) + \".\";\n        }\n\n\t\tpublic override int Count {\n\t\t\tget { return 50; }\n\t\t}\n\n\t\tpublic override Java.Lang.Object GetItem (int position)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic override long GetItemId (int position)\n\t\t{\n\t\t\treturn position;\n\t\t}\n    }\n\n### ArraySwipeAdapter, CursorSwipeAdapter, SimpleCursorAdapter Usage\n\nThese three adapters are just like:\n - [`ArrayAdapter\u003cT\u003e`](http://developer.android.com/reference/android/widget/ArrayAdapter.html)\n - [`CursorAdapter`](http://developer.android.com/reference/android/widget/CursorAdapter.html)\n - [`SimpleCursorAdapter`](http://developer.android.com/reference/android/widget/SimpleCursorAdapter.html)\n\nAll of these 3 classes require an implementation that overrides\n`GetSwipeLayoutResourceId`:\n\n    public int GetSwipeLayoutResourceId(int position)\n    {\n        // return the SwipeLayout resource id in the layout.\n    }\n","Hash":"104f08555137f7ae68b3c3adde494651","TargetPlatforms":["android"],"TrialHash":null}